@{
    ViewData["Title"] = "Departamentos";
}

<link href="~/lib/datatables/css/datatables.bootstrap4.css" rel="stylesheet" />

<div class="">

    <div class="d-flex justify-content-between pb-3">
        <h2>Salarios por Departamento</h2>
    </div>

    <p>Query: Consultar los departamentos y para cada uno incluir la suma de los salarios de los empleados de ese departamento</p>
    <div class="col-md-3">
        <code>select </code><br />
        <code>dept.dept_name name, </code><br />
        <code>sum(sal.salary) total </code><br />
        <code>  from departments dept </code><br />
        <code>left join dept_emp dxe on dept.dept_no = dxe.dept_no </code><br />
        <code>left join employees emp on dxe.emp_no = emp.emp_no </code><br />
        <code>left join salaries sal on emp.emp_no = sal.emp_no </code><br />
        <code>group by (dept.dept_name) </code><br />
        <code>order by total desc; </code><br />
    </div>

    <table id="departmentsTable" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th scope="col">Departamento</th>
                <th scope="col">Total Salarios</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

@section Scripts{
    <script src="~/lib/datatables/js/jquery.datatables.js"></script>
    <script src="~/lib/datatables/js/datatables.bootstrap4.min.js"></script>
    <script type="text/javascript">

        var departmentsTable = $('#departmentsTable');

        $(document).ready(function () {
            loadDatatable();
        });

        function loadDatatable() {
            var otable = departmentsTable.DataTable({
                ajax: {
                    url: '@Url.Action("GetDepartmentsSalaries", "Departments")',
                    type: "get",
                    dataType: "JSON",
                },
                columns: [
                    { data: "name", autoWidth: true },
                    {
                        data: "total", autoWidth: true, render: function (data) {
                            return '$ ' + formatNumber(data);
                        }
                    },
                ],
                'pageLength': 10,
                'lengthMenu': [[10, 25, 50, 100, 150], [10, 25, 50, 100, 150]],
                scroller: true,
                destroy: true,
                "order": [[0, "asc"]],
                "language": {
                    "sProcessing": "Procesando...",
                    "sLengthMenu": "Mostrar _MENU_ registros",
                    "sZeroRecords": "No se encontraron resultados",
                    "sEmptyTable": "Ningún dato disponible en esta tabla",
                    "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                    "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sSearch": "Buscar:     ",
                    "sUrl": "",
                    "sInfoThousands": ",",
                    "sLoadingRecords": "Cargando...",
                    "oPaginate": {
                        "sFirst": "Primero",
                        "sLast": "Último",
                        "sNext": "Siguiente",
                        "sPrevious": "Anterior"
                    },
                    "oAria": {
                        "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                    }
                }
            });
        }

        function formatNumber(amount, decimals) {
            amount += ''; // por si pasan un numero en vez de un string
            amount = parseFloat(amount.replace(/[^0-9\.]/g, '')); // elimino cualquier cosa que no sea numero o punto
            decimals = decimals || 0; // por si la variable no fue fue pasada
            // si no es un numero o es igual a cero retorno el mismo cero
            if (isNaN(amount) || amount === 0)
                return parseFloat(0).toFixed(decimals);
            // si es mayor o menor que cero retorno el valor formateado como numero
            amount = '' + amount.toFixed(decimals);
            var amount_parts = amount.split('.'),
                regexp = /(\d+)(\d{3})/;
            while (regexp.test(amount_parts[0]))
                amount_parts[0] = amount_parts[0].replace(regexp, '$1' + ',' + '$2');
            return amount_parts.join('.');
        }
    </script>
}